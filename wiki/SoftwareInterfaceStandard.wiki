#summary Interface Standard

This documentation is to define the interface standard for the DC20A Crystal Orientation Data Collection for Conversion to a General Data Type project. The standard is aimed to welcome more research equipments and mechanisms into the Metadata/Storage solution, and improve the expandability of the system design.

http://crystal-orientation-data-collection.googlecode.com/svn/wiki/attachments/SoftwareInterfaceStandard/jigsaw_puzzle.png <br>_Sourced from `http://sv.wikipedia.org/wiki/Fil:Jigsaw_Puzzle.svg` with modification._

= Introduction =

The idea of this standard is to separate tasks and responsibilities of research data capture/processing/analysis/transferring into two streams, and collaborate on a specified interface. Essentially these tasks are identified in this project,
  * Collecting research project information from 3rd party systems
  * Collecting metadata from researchers who performing the research session
  * Communicating with the research mechanism to capture research data
  * Research data processing, converting to other formats, improving the quality or any type of analysis
  * Transferring research data and the outcomes to a centralised network storage
  * Making the research data visible in organisation

Despite how the procedure of research data processing looks like, metadata capture and storage remains the same. Separating the research data processing apart from other tasks will provide an umbrella solution for researchers and benefit from different ways, including:
  * Researchers would focus on the research data and its analysis/processing, rather than other parts of the solution
  * Researchers would have the flexibility to build their program with any language they are familiar with, which is a boost on productivity and efficiency
  * This separation of tasks will simplify the integration workload and provide an umbrella solution for further extension to more research equipments and mechanisms
  * Debugging and troubleshooting is only required for the program processing research data, rather than the whole solution

The stream processing the research data, performing the analysis/conversion/enhancement task is named *Processing Program* afterwards.
The stream processing the metadata, looking after the storage is named *Manipulating Software* afterwards.

= How It Works =
The collaboration between the two streams.

The Manipulating Software will be compiled as a stand-alone program. This software will invoke Processing Program when research data is determined.

The Processing Program is expected to be running as a standalone execution (typically a .exe file, or such with some extra parameters). This program should have an automatical data procedure when invoked by Manipulating Software, no user interface is expected. Processing Program will receive some extra parameters and perform its own work after that.

Once Processing Program completed its procedure, it is required to report outcomes to the Manipulating Software through the standard output. The report is expected to follow a particular format which is detailed in sections after.

When Manipulating Software receives the outcome report from Processing Program, Manipulating Software will parse the output and provide storage for research data as indicated in outcome report, including raw research data generated by equipment, analysis/conversion/improvement data generated by Processing Program and the metadata produced by Manipulating Software.

The Processing Program may also report an error whenever it's procedure failed. Manipulating Software will take over the responsibility based on the failure.

The whole solution looks like this, as diagrammed.

http://crystal-orientation-data-collection.googlecode.com/svn/wiki/attachments/SoftwareInterfaceStandard/software-interface-flowchart.png <br>_Flow chart of both parties_

= Reference =

== Parameters ==
When research data is determined, Manipulating Software will launch the Processing Program defined in its configuration file with these parameters.

*`--launched-from-manipulating-software`*

This parameter is always passed when a Processing Program invoked by the Manipulating Software

*`--research-data-file FILE`*

For each research data file determined, one instance of this parameter will be passed and the full path to the data file will be appended. There may be multiple occuacations of this parameter if more than one data file have been found

*`--research-metadata-file FILE`*

The Manipulating Software will generate a metadata file which contains the key-value pairs captured during the acquisition process. There are some information may be referred by Processing Program during its procedure of data. Multiple metadata files may be passed to the Processing Program.

*`--research-file-list FILE`*

The windows system have a limitation on maximum length of command-line parameters. See http://support.microsoft.com/kb/830473 .

When the length of all parameters exceeds 1024 characters, all file paths will be wroten to a midterm file separated with a breakline. This midterm file will have a random name which is appended to this parameter. The midterm file will left on file system for trouble shooting.

The format of midterm file could be found in sections after.
If this parameter received, a Processing Program should ignore any `--research-metadata-file` or `--research-data-file parameter`.

== File List Format ==

The midterm file will have two sections, metadata-file and data-file. Each section will be started with a title line in format of either
`[metadata-file]` or `[data-file]`.

Following the title line, each section will have a list of files. The full path of each file is presented and ended with a break (\r\n).

File List Sample
{{{
[metadata-file]
C:\tsl\RM09332.metadata

[data-file]
C:\tsl\untitled1.ang
C:\tsl\untitled1.res
}}}

== Outcomes Report ==

a Processing Program should produce a outcome report whenever it finishes its procedure. An outcome report is a list of key-values pairs indicating the procedure result. Each line will follow format
`KEY=VALUE`

A key is a string composed by letter, numberic or dot. No space or any other character allowed.

A value can contain any character even the equal symbol (=). But make sure no line breaks in the value.

*A list of interested outcome item*

*`data.append=1 | 0`*

Shall the data files passed in as parameters append to outcome report? 1 for yes and 0 for no. Default 0.
If yes, all the data files passed with --research-data-file parameter or in --research-file-list will be appended to the outcome report.

*`data.file=FILE`*

Append a new file to the outcome report. Data files appended will be transferred to ISILON share.
This line can occur more than once. 

*`metadata.append=1 | 0`*

Shall the metadata files passed in as parameters append to outcome report? 1 for yes and 0 for no. Default 0.
If yes, all the metadata files passed with --research-metadata-file parameter or in --research-file-list will be appended to the outcome report.

*`metadata.file=FILE`*

Append a new metafile to the outcome report. Metadata files appended will be transferred to network storage.
This line can occur more than once. 

Other lines will be ignored at current version.

== Metadata File format ==

The metadata file contains a set of key-value pairs presenting the research data in different perspectives. Each line will follow format
`KEY=VALUE`

A key is a string composed by letter, numberic or dot. No space or any other character allowed.

A value can contain any character even the equal symbol (=). But make sure no line breaks in the value.

There may be duplication to KEY names.

A series of metadata will be passed on to a Processing Program by the Manipulating Software during its data capture, which may help the procdure of research data processing. 

A Processing Program may also generate a metadata file when it's capable to supply more technical metadata for current research data. The metadata file generated should also follow this format.

As metadata is project and research data specificed, they will be displayed directly without any parse or analysis.

A Processing Program may request input from the researcher before they conduct their research activity. Refer to ConfigurationAndSetup for more details.

= Error Handling =