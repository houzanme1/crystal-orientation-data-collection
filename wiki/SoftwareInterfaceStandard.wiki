#summary Interface Standard

This documentation is to define the interface standard for the DC20A Crystal Orientation Data Collection for Conversion to a General Data Type project. The standard is aimed to welcome more research equipments and mechanisms into the Metadata/Storage solution, and improve the expandability of the system design.

http://crystal-orientation-data-collection.googlecode.com/svn/wiki/attachments/SoftwareInterfaceStandard/jigsaw_puzzle.png <br>_Sourced from `http://sv.wikipedia.org/wiki/Fil:Jigsaw_Puzzle.svg` with modification._





= Introduction =

The idea of this standard is to separate tasks and responsibilities of research data capture/processing/analysis/transferring into two streams, and collaborate on a specified interface. Essentially these tasks are identified in this project,
  * Collecting research project information from 3rd party systems
  * Collecting metadata from researchers who performing the research session
  * Communicating with the research mechanism to capture research data
  * Research data processing, converting to other formats, improving the quality or any type of analysis
  * Transferring research data and the outcomes to a centralised network storage
  * Making the research data visible in organisation

Despite how the procedure of research data processing looks like, metadata capture and storage remains the same. Separating the research data processing apart from other tasks will provide an umbrella solution for researchers and benefit from different ways, including:
  * Researchers would focus on the research data and its analysis/processing, rather than other parts of the solution
  * Researchers would have the flexibility to build their program with any language they are familiar with, which is a boost on productivity and efficiency
  * This separation of tasks will simplify the integration workload and provide an umbrella solution for further extension to more research equipments and mechanisms
  * Debugging and troubleshooting is only required for the program processing research data, rather than the whole solution

The stream processing the research data, performing the analysis/conversion/enhancement task is named *Processing Program* afterwards.
The stream processing the metadata, looking after the storage is named *Manipulating Software* afterwards.





= How It Works =
The collaboration between the two streams.

The Manipulating Software will be compiled as a stand-alone program. This software will invoke Processing Program when research data is determined.

The Processing Program is expected to be running as a standalone execution (typically a .exe file, or such with some extra parameters). This program should have an automatic data procedure when invoked by Manipulating Software, no user interface is expected. Processing Program will receive an exchange file as parameter and perform its own work after that.

Once Processing Program completed its procedure, it is required to report outcomes to the Manipulating Software by updating the exchange file with its own data. The exchange file is expected to follow a particular format which is detailed in sections after.

When Processing Program exits, and the Manipulating Software receives the exchange file from Processing Program, Manipulating Software will parse the exchange file and provide storage for research data as indicated, including raw research data generated by equipment, analysis/conversion/improvement data generated by Processing Program and the metadata produced by Manipulating Software.

The Processing Program may also report an error whenever it's procedure failed. Manipulating Software will take over the responsibility based on the failure.

The whole solution looks like this, as diagrammed.

http://crystal-orientation-data-collection.googlecode.com/svn/wiki/attachments/SoftwareInterfaceStandard/software-interface-bluemap.png <br>_How they work together_


http://crystal-orientation-data-collection.googlecode.com/svn/wiki/attachments/SoftwareInterfaceStandard/software-interface-flowchart.png <br>_Flow chart of both parties_





= Reference =

== Parameters ==
When research data is determined, Manipulating Software will launch the Processing Program defined in its configuration file with these parameters.

*`--launched-from-manipulating-software`*

This parameter is always passed when a Processing Program invoked by the Manipulating Software.

*`--research-exchange-list FILE`*

This parameter will pass a master file to the Processing Program, which contains a list of metadata files, as well as research data files.

The exchange file will contain the key-value pairs captured during the acquisition process. There are some information may be referred by Processing Program during its procedure.

For each research data file determined, the full path to the data file will be appended into this exchange file. 

This exchange file will have a random name which is appended to this parameter. The exchange file will left on file system for trouble shooting after the processing.

The format of exchange file could be found in sections after.

Samples of command line when invoking Processing Program.
<code language="bat">REM This command line will be invoked when running conversion.exe as a Processing Program
conversion.exe --launched-from-manipulating-software --research-exchange-list "C:\fea7e690-0504-11e1-be50-0800200c9a66.txt"

REM This command line will be invoked when running process.m (Matlab Script) a Processing Program
start /b process.m --launched-from-manipulating-software --research-exchange-list "C:\fea7e690-0504-11e1-be50-0800200c9a66.txt"</code>

== Exchange File Format ==

The exchange file will have two sections, `metadata` and `files`. Each section will be started with a title line in format of either
{{{
[metadata]
...
}}}
or
{{{
[files]
...
}}}

Following the title line, each section will have a list of items. Each line is ended with a line break (\r\n). Blank lines in exchange file will be ignored.

=== Metadata Section ===
Under the section of *`metadata`*, exchange file will present a list of key-values pairs indicating the metadata. Each line will follow format
{{{
KEY=VALUE
}}}

A key is a string composed by letter, numeric or dot. No space or any other character allowed. There may be duplication to KEY names.

A value can contain any character even the equal symbol (=). But make sure no line breaks in the value.

A series of metadata will be passed on to a Processing Program by the Manipulating Software during its data capture, which may help the procedure of research data processing. 

A Processing Program may also report metadata when it's capable to supply more technical metadata for current research data. Metadata reported by Processing Program will be combined together with the metadata captured during the data acquisition by the Manipulating Software, and transferred on the network storage.

Some metadata Key has specified meaning or indications. A list of interested metadata key can be find in sections after.

To other metadata, as they are project and research data specified, they will not be parsed or analysed.

A Processing Program may request input from the researcher before they conduct their research activity. Refer to ConfigurationAndSetup for more details.

=== Files Section ===

Under the `files` section, a list of research data file will be present. Each file takes one line and ended with a line break.

A Processing Program should avoid duplication in the file lists, although the Manipulating Software will do a double check before manipulation on each file. In some extreme situations, duplication of files with large size may delay the whole process.

=== Exchange File Sample ===
{{{
[metadata]
data.confirm.transfer=1
data.storage.directory=RM00099-crystal-orientation/andrew
data.project.code=RM00099
data.project.name=crystal-orientation
data.project.owner=Andrew
data.datetime=2011-11-02 13:32:20+11:00
error.code=0
error.message=Operation Success
TCL.parameters=129,250,223
TCL.angle=60
TCL.tempture=50oc

[files]
C:\tsl\untitled1.ang
C:\tsl\untitled1.res
}}}

== Error Handling ==

As a Processing Program may be written in some interpreter languages (like Matlab, Visual Basic etc), and some of these scripts will not return a proper error code when its execution completed. The Manipulating Software can not relay on the exit code of the Processing Program.

A Processing Program need to take the responsibility to handle its error message. 

If a Processing Program exit due to some unexpected faults, it should update the exchange file with the error code and error message if possible. Otherwise the Manipulating Software can not determine the error nor request intervention from researcher.

Only if a Processing Program updated exchange file and marked the error code as non-zero, the Manipulating Software will understand the procedure of Processing Program is failed. In this case, if the error message is configured, the Manipulating Software will show a notification on screen, exposing the error message to researchers.

An unexpected exit may damage the exchange file. The Manipulating Software will maintain a mirror copy of the exchange file for back up purpose. The backup file will be used if exchange file is damaged.

Error code and error message should be updated in exchange file, under section `metadata`. Refer to the Appendix for more details.

== Interested Metadata ==

In the `metadata` section of exchange file, some key names have been defined with particular meaning to communicate information between the Manipulating Software and a Processing Program.

||Key||Default Value||Direction^1^||Description||
||error.code||0||OUT||An error code. 0 for success and fail for otherwise||
||error.message|| ||OUT||An error message. Only valid when error.code is non-zero||
||data.confirm.transfer||1||IN OUT||If requires confirmation from researcher before transferring to network storage. 1 for confirmation required, 0 to force transferring||
||data.storage.directory|| ||IN||The directory on network storage where the data is going to be stored||
||data.project.code|| ||IN||The research project code||
||data.project.name|| ||IN||The research project name||
||data.project.owner|| ||IN||The owner of the data, normally supervisor of the research project||
||data.datetime|| ||IN||The time when data files determined in [http://tools.ietf.org/html/rfc3339 RFC 3339 format]||

Notes:
  # Direction indicates if the metadata is passed from the Manipulating Software or reported by a Processing Program.
    * IN - The metadata is generated by the Manipulating Software and passed in as parameter
    * OUT - The metadata can be updated, or is to be updated by the Processing Program.